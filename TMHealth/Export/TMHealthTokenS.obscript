scn TMHealthTokenS

float fHealthFraction
ref container
float xMax
float x ;x represents health
float fStartBleedValue
float deathTimer
float targetHealth
float previousHealth
float fStartRegenValue
float fullHealthTimer
float secondsPassed

begin _GameMode
	if eval !Call CFIsTokenStable
		return
	elseif eval (Call CFStandardTokenRemovalCheck)
		RemoveMe
	endif

	set container to GetContainer

	if eval TMHealthQst.bLogFlooding
		if eval container == PlayerRef
			Scribe (GetFormIDString TMHealthTokenS) + "`==== TMHealthTokenS. container:" +$container, 1
		endif
	endif

	if eval (TMHealthQst.neutralizefGlobalTimeMultiplier != 0)
		Let secondsPassed := GetSecondsPassed / TMHealthQst.neutralizefGlobalTimeMultiplier
	else
		Let secondsPassed := GetSecondsPassed
	endif
	Let xMax := (Call CFGetAVMax container avcHealth) -1 ; You die when you reach < 1 health, so we'll adjust by -1
	Let x := ((Call CFGetAVCurrent container avcHealth) -1) ; You die when you reach < 1 health, so we'll adjust by -1
	Let fHealthFraction := x / xMax

	if eval (TMHealthQst.bEnableBleed && (fHealthFraction < TMHealthQst.startBleedHealthFraction))
		if eval (TMHealthQst.bLogWarning)
			if eval (TMHealthQst.secondsUntilDeathFromBleedHealthPercentage == 0)
					Scribe (GetFormIDString TMHealthTokenS) + "`invalid secondsUntilDeathFromBleedHealthPercentage:" + $TMHealthQst.secondsUntilDeathFromBleedHealthPercentage, 1
				return
			endif
		endif
		Let fStartBleedValue := TMHealthQst.startBleedHealthFraction * xMax

		if previousHealth != x
			;t = x * SUD / SBV
			Let deathTimer := TMHealthQst.secondsUntilDeathFromBleedHealthPercentage * x / fStartBleedValue
			if eval TMHealthQst.bLogFlooding
				if eval container == PlayerRef
					Scribe (GetFormIDString TMHealthTokenS) + "`previousHealth:"+$previousHealth+" (GetActorValueC avcHealth):"+$(GetActorValueC avcHealth)+" deathTimer:"+$deathTimer, 1
				endif
			endif
		endif

		Let deathTimer -= secondsPassed
		
		if (deathTimer <= 0)
			; Might not be necessary..
			Let targetHealth := 0
		else
			; Solving for x (targetHealth) because solving for dx can get inaccurate due to lack of precision.
			Let targetHealth := (deathTimer / TMHealthQst.secondsUntilDeathFromBleedHealthPercentage) * fStartBleedValue + 1
		endif

		if eval TMHealthQst.bLogFlooding
			if eval container == PlayerRef
				Scribe (GetFormIDString TMHealthTokenS) + "`deathTimer:"+$deathTimer+" targetHealth:"+$targetHealth+" previousHealth:"+$previousHealth, 1
			endif
		endif

		Call CFSetAVCurrent container avcHealth targetHealth
	endif
	if eval (TMHealthQst.bEnableRegen && (fHealthFraction > TMHealthQst.startRegenHealthFraction))
		if eval (TMHealthQst.bLogWarning)
			if eval (TMHealthQst.secondsUntilFullHealthFromRegenHealthPercentage == 0)
				Scribe (GetFormIDString TMHealthTokenS) + "`invalid secondsUntilFullHealthFromRegenHealthPercentage:" + $TMHealthQst.secondsUntilFullHealthFromRegenHealthPercentage, 1
				return
			endif
		endif
		Let fStartRegenValue := TMHealthQst.startRegenHealthFraction * xMax

		if previousHealth != x
			;t = (xMax - x) * SUFH / (xMax - SRV)
			Let fullHealthTimer := (xMax - x) * TMHealthQst.secondsUntilFullHealthFromRegenHealthPercentage / (xMax - fStartRegenValue)
			if eval TMHealthQst.bLogFlooding
				if eval container == PlayerRef
					Scribe (GetFormIDString TMHealthTokenS) + "`previousHealth:"+$previousHealth+" (GetActorValueC avcHealth):"+$(GetActorValueC avcHealth)+" fullHealthTimer:"+$fullHealthTimer, 1
				endif
			endif
		endif

		Let fullHealthTimer := Call CFMax 0 (fullHealthTimer - secondsPassed)
		
		; Solving for x (targetHealth) because solving for dx can get inaccurate due to lack of precision.
		Let targetHealth := xMax - (xMax - fStartRegenValue)*(fullHealthTimer / TMHealthQst.secondsUntilFullHealthFromRegenHealthPercentage) + 1

		if eval TMHealthQst.bLogFlooding
			if eval container == PlayerRef
				Scribe (GetFormIDString TMHealthTokenS) + "`fullHealthTimer:"+$fullHealthTimer+" targetHealth:"+$targetHealth+" previousHealth:"+$previousHealth, 1
			endif
		endif

		Call CFSetAVCurrent container avcHealth targetHealth
	endif
	if eval TMHealthQst.bLogFlooding
		if eval container == PlayerRef && (!(TMHealthQst.bEnableRegen && (fHealthFraction > TMHealthQst.startRegenHealthFraction))) && (!(TMHealthQst.bEnableBleed && (fHealthFraction < TMHealthQst.startBleedHealthFraction)))
			Scribe (GetFormIDString TMHealthTokenS) + "`Neither bleeding nor regenerating", 1
		endif
	endif
	Let previousHealth := (Call CFGetAVCurrent container avcHealth) -1
end