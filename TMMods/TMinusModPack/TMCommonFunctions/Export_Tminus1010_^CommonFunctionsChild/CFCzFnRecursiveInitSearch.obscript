scn CFCzFnRecursiveInitSearch

; Args
ref rRefToSearch
array_var aSearched
array_var a2dInitiations
array_var aRefsToMatch
;
short bMoreRefsIncluded
short sCounter
array_var Iter
ref rNthExplicitRef

begin _Function { rRefToSearch aSearched a2dInitiations aRefsToMatch }
	ar_Append aSearched rRefToSearch

	; Find out if our rRefToSearch has IncludeInitiations as an explicit ref. 
	Let sCounter := GetNumExplicitRefs rRefToSearch
	while (sCounter -=1) >= 0
		if eval (GetNthExplicitRef sCounter rRefToSearch) == IncludeInitiations
			Let bMoreRefsIncluded := 1
			break
		endif
	loop

	; Search rRefToSearch's explicit refs for matches to aRefsToMatch.
	Let sCounter := GetNumExplicitRefs rRefToSearch
	while (sCounter -=1) >= 0
		Let rNthExplicitRef := (GetNthExplicitRef sCounter rRefToSearch)
		ForEach Iter <- aRefsToMatch
			if eval rNthExplicitRef == Iter["Value"] || rNthExplicitRef == InitAll
				ar_Append a2dInitiations[Iter["Key"]] rRefToSearch
				break
			endif
		loop
		if eval bMoreRefsIncluded
			if eval fNotFound == ar_Find rNthExplicitRef aSearched
				Call CFCzFnRecursiveInitSearch rNthExplicitRef aSearched a2dInitiations aRefsToMatch
			endif
		endif
	loop
end