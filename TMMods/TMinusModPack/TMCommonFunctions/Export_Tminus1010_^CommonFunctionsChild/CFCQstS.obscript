scn CFCQstS
;Every frame, the quests at the bottom of the load order are run at the begining of the frame.
;(the quests at the top of the load order are run in the middle of the frame, before object scripts.)
;Wait Entries especially should be addressed here so that the Wait functionality is consistent.

; User Options
;PeriodicScanning
float fActorScanPeriod
; Shared/Core Variables
float fQuestDelayTime
short sCounter
ref rTemp
array_var Iter
short bGetCellChanged
short bPrimaryInitComplete
; Delay
array_var a2dDelayEntries ;0:fTimeToWait 1:MenuModeType 2:rScriptToRun 3:aVariablesToPassToScriptToRun
; Initiations
short iInGameInitCountdown
; HighActors
array_var aCurHighActors
array_var aOldHighActors
; EVENTOnGameMode
int bMenuMode
; EventCellChanged
ref rOldCell
; EventWeatherChanged
ref rOldWeather
; EVENTPlayerSlept
short iIntendedHours
short iActualHours
short bWait

begin _GameMode
	; Update Frame Variables
	Let SB.iFrameCount += 1
	Let SB.fFrameSecondsPassed := GetSecondsPassed
	Let SB.fGameModeGameHour += SB.fFrameSecondsPassed/3600
	if SB.fGameModeGameHour > 24
		Let SB.fGameModeGameHour -= 24
		Let SB.iGameModeDaysPassed += 1
	endif
	;if eval playerRef.GetParentCell ;There might be a better way to test for this exception
	if eval SB.bGameLoaded >= 2
		Let bGetCellChanged := GetCellChanged
	endif

	; EVENTQuasiStartOfFrame
	if eval bPrimaryInitComplete
		Call DispatchEvent2 EVENTQuasiStartOfFrame ar_Null
	endif

	; InGameImmediatelyInitiations
	if eval iInGameInitCountdown == 3
		Call CFCzFnCallInitiations 4
	endif

	; InGameInitiations
	if eval iInGameInitCountdown
		Let iInGameInitCountdown -= 1
		if eval !iInGameInitCountdown
			Call CFCzFnCallInitiations 3 ;delayed until refs become stable
		endif
	endif

	; EVENTOnGameMode
	if eval bMenuMode
		Let bMenuMode := 0
		Call DispatchEvent2 EVENTOnGameMode ar_Null
	endif

	; Addressing Delay Entries
	Call CFCzFnAddressDelayEntries

	; Address MsgBoxWithHandler Entry
	if eval CF.rMsgBoxHandler
		Call zCFAddressMsgBoxWithHandler ar_Null
	endif

	; EVENTNewHighActor
	Let aCurHighActors := GetHighActors
	ar_Insert aCurHighActors 0 PlayerRef
	ForEach Iter <- aCurHighActors
		Let rTemp := Iter["Value"]
		if eval ar_HasKey aOldHighActors Iter["Key"]
			if eval aOldHighActors[Iter["Key"]] == rTemp
				continue
			elseif eval Call IsInCollection (&rTemp),aOldHighActors
				continue
			endif
		endif
		;rActor is new.
		if eval !(rTemp.GetItemCount zCFMarkProcessed)
			rTemp.AddItemNS zCFMarkProcessed 1
			Call DispatchEvent2 EVENTProcessActor ar_Map "rActor"::rTemp "rbActor"::(rTemp.GetBaseObject)
		endif
		Call DispatchEvent2 EVENTNewHighActor ar_Map "rActor"::rTemp "rbActor"::(rTemp.GetBaseObject)
	loop
	Let aOldHighActors := aCurHighActors

	; EVENTCellChanged
	if eval bGetCellChanged
		Let rTemp := PlayerRef.GetParentCell
		Call DispatchEvent2 EVENTCellChanged ar_Map "rOldCell"::rOldCell "rNewCell"::rTemp "bInterior"::playerRef.IsInInterior
		Let rOldCell := rTemp
	endif

	; EVENTWeatherChanged
	if eval rOldWeather != GetCurrentWeatherID
		Let rTemp := GetCurrentWeatherID
		Call DispatchEvent2 EVENTWeatherChanged ar_Map "rOldWeather":: rOldWeather "rNewWeather"::rTemp "bInterior"::playerRef.IsInInterior
		Let rOldWeather := rTemp
	endif

	; SBVar rLastCrosshairRef
	if eval GetCrosshairRef
		Let SB.rLastCrosshairRef := GetCrosshairRef
	endif


	; EVENTPlayerBowRelease
	if eval SB.bBowDrawn ;set to 1 by event handler.
		if eval !playerRef.IsAnimGroupPlaying "AttackBow" ; alternative method to OBSE OnRelease handler (because it may not account for denocking by script).
			Let SB.bBowDrawn := 0
			Call DispatchEvent2 EVENTPlayerBowRelease ar_Null ; might also be dispatched by OnRelease handler
		endif
	endif

	; SBVars bRunning bWalking bStanding
	;SB.bSprinting is set by aaTMRunningAlong.esp
	Let SB.bRunning := !(SB.bSprinting) && PlayerRef.IsRunning && (PlayerRef.IsMovingBackward || PlayerRef.IsMovingForward || PlayerRef.IsMovingLeft || PlayerRef.IsMovingRight)
	Let SB.bWalking := !(PlayerRef.IsRunning) && (PlayerRef.IsMovingBackward || PlayerRef.IsMovingForward || PlayerRef.IsMovingLeft || PlayerRef.IsMovingRight)
	Let SB.bStanding := !(PlayerRef.IsMovingBackward || PlayerRef.IsMovingForward || PlayerRef.IsMovingLeft || PlayerRef.IsMovingRight)

	; EVENTPlayerSlept
	Call CFCzFnAddressEVENTPlayerSlept
end

begin _MenuMode

	; Update Frame Variables
	Let SB.iFrameCount += 1
	Let SB.fFrameSecondsPassed := GetSecondsPassed
	Let fQuestDelayTime := 0.0001

	; EVENTQuasiStartOfFrame
	if eval SB.bGameLoaded
		Call DispatchEvent2 EVENTQuasiStartOfFrame ar_Null
	endif

	; MainMenuInitiations
	if eval !bPrimaryInitComplete
		if GetGameRestarted
			Call CFCzFnCallInitiations 0
		endif
		if eval (MenuMode 1044) ;MainMenu
			Call CFCzFnCallInitiations 1
		endif
	endif

	; EVENTOnMenuMode
	if eval !bMenuMode && SB.nfmEvents
		Let bMenuMode := 1
		Call DispatchEvent2 EVENTOnMenuMode ar_Null
	endif

	; Prevent further action during MainMenu.
	if eval !SB.bGameLoaded
		return
	endif

	; Addressing Wait Entries
	Call CFCzFnAddressDelayEntries

	; Address MsgBoxWithHandler Entry
	if eval CF.rMsgBoxHandler
		Call zCFAddressMsgBoxWithHandler ar_Null
	endif

	; EVENTPlayerSlept
	Call CFCzFnAddressEVENTPlayerSlept
end