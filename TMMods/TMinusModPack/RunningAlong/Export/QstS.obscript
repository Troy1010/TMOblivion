scn QstS

float fQuestDelayTime

short logLevel
float secondsUntilFullRegenWhileStandingIfCompletelyFit
float secondsUntilFullRegenWhileWalkingIfCompletelyFit
float secondsUntilFullRegenWhileRunningIfCompletelyFit
float secondsUntilFullRegenWhileSprintingIfCompletelyFit
float secondsUntilFullRegenWhileStandingIfCompletelyNotFit
float secondsUntilFullRegenWhileWalkingIfCompletelyNotFit
float secondsUntilFullRegenWhileRunningIfCompletelyNotFit
float secondsUntilFullRegenWhileSprintingIfCompletelyNotFit
float athleticsWeightFraction

float secondsUntilFullRegen
float fFatigueRegen
int iPreviousAVBase
int iCountDownAfterMenuMode
array_var iter
short iMagicSkillCount
int avBase
short bRecentlyFell
float fRecentlyJumpedWhileSprintingTimer
short bShouldRunAfterNotMovingBackwards
short bInit
float secondsPassed
short bAdjustedFatigueMax
float x
float y
float difference
short bPrintToConsole
short bShouldLogFlooding
short featureFallOnLowFatigue
short bShouldLogNonMagicSkillFractionCalculation 
short bShouldLogFatigueRegenCalculation
short featureNoBackwardsRunning
short sprintKey
short featureFatigue
short featureSprint
float neutralizefGlobalTimeMultiplier
float fNonMagicSkillFraction

begin _GameMode
	; For some reason, rarely, but sometimes when specific save games are loaded, PlayerRef.IsRunning is always false until the player walks. I think it's when the player was walking backwards when the save occurred.
	; This is an attempt to resolve that issue.
	if eval GetGameLoaded
		Let bShouldRunAfterNotMovingBackwards := 0
	endif
	;
	Let secondsPassed := GetSecondsPassed / neutralizefGlobalTimeMultiplier
	; # Start Walking
	if eval !bInit
		Let bInit := 1
		if eval !playerRef.IsRunning
			TapControl ControlIDToggleRunWalk
		endif
	endif
	; # Define bStanding, bWalking, bRunning, bSprinting
	if eval ((!PlayerRef.IsMovingForward) && (!PlayerRef.IsMovingBackward) && (!PlayerRef.IsMovingLeft) && (!PlayerRef.IsMovingRight)) || PlayerRef.IsRidingHorse
		Let SB.bStanding := 1
		Let SB.bWalking := 0
		Let SB.bRunning := 0
		Let SB.bSprinting := 0
	elseif eval !PlayerRef.IsRunning
		Let SB.bStanding := 0
		Let SB.bWalking := 1
		Let SB.bRunning := 0
		Let SB.bSprinting := 0
	elseif eval (!featureSprint) || (((!isKeyPressed2 sprintKey) || PlayerRef.IsMovingBackward || PlayerRef.IsMovingLeft || PlayerRef.IsMovingRight) && (fRecentlyJumpedWhileSprintingTimer <= 0))
		Let SB.bStanding := 0
		Let SB.bWalking := 0
		Let SB.bRunning := 1
		Let SB.bSprinting := 0
	else
		Let SB.bStanding := 0
		Let SB.bWalking := 0
		Let SB.bRunning := 0
		Let SB.bSprinting := 1
	endif
	if eval fRecentlyJumpedWhileSprintingTimer > 0
		if eval PlayerRef.IsInAir
			Let fRecentlyJumpedWhileSprintingTimer -= secondsPassed
		else
			Let fRecentlyJumpedWhileSprintingTimer := 0
		endif
	endif
	if eval PlayerRef.IsJumping && SB.bSprinting
		Let fRecentlyJumpedWhileSprintingTimer := 2
	endif
	; # Adjust Speed During Sprinting
	;I'm not sure if SetAVModC is the best way to adjust Speed
	;Using a flat value instead of % to prevent multiplicativeness
	if eval SB.bSprinting
		PlayerRef.SetAVModC avcSpeed "script" 75
	else
		PlayerRef.SetAVModC avcSpeed "script" 0
	endif
	; # No Walking while Sprinting
	if eval (iCountDownAfterMenuMode >=0) ;This is a workaround to solve an issue where the control would be tapped when coming out of MenuMode and control is pressed
		Let iCountDownAfterMenuMode -= 1
	elseif eval (!PlayerRef.IsRunning) && (IsKeyPressed2 sprintKey) && (!PlayerRef.IsMovingLeft) && (!PlayerRef.IsMovingRight) && (!PlayerRef.IsMovingBackward) && PlayerRef.IsMovingForward
		Call LogRA "Walking while trying to sprint, so tapping ToggleRunWalk"
		TapControl ControlIDToggleRunWalk
	endif
	; # Feature: No Backwards Running
	if eval featureNoBackwardsRunning
		if eval bShouldRunAfterNotMovingBackwards
			if eval (!PlayerRef.IsRunning) && (!PlayerRef.IsMovingBackward)
				Call LogRA "No longer running backwards, so tapping ToggleRunWalk"
				TapControl ControlIDToggleRunWalk
				Let bShouldRunAfterNotMovingBackwards := 0
			endif
		else
			if eval PlayerRef.IsRunning && PlayerRef.IsMovingBackward
				Call LogRA "Running backwards, so tapping ToggleRunWalk"
				TapControl ControlIDToggleRunWalk
				Let bShouldRunAfterNotMovingBackwards := 1
			endif
		endif
	endif
	; # Define fNonMagicSkillFraction
	if eval bShouldLogNonMagicSkillFractionCalculation 
		Call LogRA "====== Define fNonMagicSkillFraction ======"
	endif
	;fNonMagicSkillFraction is a number between 0 and 1 that represents how dedicated to physical fitness the player is. Separate from normal stats because those are meant to scale.
	;It would be a good idea to calculate this less often, perhaps every 5s.
	;Using iPreviousValue so that, for example, if the player has all skills at 100, it considers them at 1 fNonMagicSkillFraction
	Let iMagicSkillCount := 0
	Let iPreviousAVBase := 0
	ForEach iter <- ar_CustomSort (ar_List avcAthletics, avcBlade, avcBlock, avcBlunt, avcHandToHand, avcHeavyArmor, avcAlchemy, avcAlteration, avcConjuration, avcDestruction, avcIllusion, avcMysticism, avcRestoration, avcAcrobatics, avcLightArmor, avcMarksman, avcMercantile, avcSecurity, avcSneak, avcSpeechcraft) ActorValueComparator 1
		Let avBase := Call CFGetAVBase PlayerRef iter["Value"]
		if eval bShouldLogNonMagicSkillFractionCalculation 
			Call LogRA "i:" +$iter["Key"] +" avc:" +$iter["Value"] +" avBase:" +$avBase +" iPreviousAVBase:" +$iPreviousAVBase
		endif
		if eval ((avBase <= 5) || (iter["Key"] >= 6 && iPreviousAVBase != avBase))
			break
		elseif eval (-99999.0 != ar_Find iter["Value"] (ar_List avcRestoration, avcConjuration, avcDestruction, avcAlteration, avcIllusion, avcMysticism))
			if eval bShouldLogNonMagicSkillFractionCalculation 
				Call LogRA "Found matching avc:" +$iter["Value"]+ " avBase:" + $avBase
			endif
			Let iMagicSkillCount += 1
			if eval bShouldLogNonMagicSkillFractionCalculation 
				Call LogRA "iMagicSkillCount is now:" +$iMagicSkillCount
				if eval iter["Key"] >= 6
					Call LogRA "iter[Key] >= 6:"+$(Call NarrateSL &(iter["Key"] >= 6))
					Call LogRA "iPreviousAVBase != avBase:"+$(iPreviousAVBase != avBase)
				endif
			endif
			Let iPreviousAVBase := Call CFGetAVBase PlayerRef iter["Value"]
		endif
	loop
	if eval bShouldLogNonMagicSkillFractionCalculation 
		Call LogRA "iMagicSkillCount:" +$iMagicSkillCount
	endif
	Let fNonMagicSkillFraction := Call WithinRange 0 (1 - (iMagicSkillCount / 6)) 1
	if eval bShouldLogNonMagicSkillFractionCalculation 
		Call LogRA "fNonMagicSkillFraction:" +$fNonMagicSkillFraction
	endif
	; # Feature: FallOnLowFatigue
	if eval featureFallOnLowFatigue
		if eval ((PlayerRef.GetActorValueC avcFatigue) < 3) && !bRecentlyFell
			Let bRecentlyFell := 1
			Call CFSetAVCurrent PlayerRef avcFatigue (-10000) ;Negative fatigue causes the actor to fall.
			Call Delay 3 PostFallWaiter ar_Null
			Call Delay 6 PostFallWaiter2 ar_Null
		endif
	endif
	; # Feature: Fatigue
	if eval featureFatigue
		; ## Fatigue Regen
		;If secondsPassed is big, it means the player waited or something. Just regen all of it.
		Let fFatigueRegen := 0
		if eval (secondsPassed > 20)
			Let fFatigueRegen := 10000
		else
			if eval SB.bWalking
				Let secondsUntilFullRegen := secondsUntilFullRegenWhileWalkingIfCompletelyNotFit + (secondsUntilFullRegenWhileWalkingIfCompletelyFit - secondsUntilFullRegenWhileWalkingIfCompletelyNotFit) * fNonMagicSkillFraction
			elseif eval SB.bRunning
				Let secondsUntilFullRegen := secondsUntilFullRegenWhileRunningIfCompletelyNotFit + (secondsUntilFullRegenWhileRunningIfCompletelyFit - secondsUntilFullRegenWhileRunningIfCompletelyNotFit) * fNonMagicSkillFraction
			elseif eval SB.bSprinting
				;Drain value should move from sprint to running, depending on athletics and athleticsWeightFraction.
				Let x := secondsUntilFullRegenWhileSprintingIfCompletelyNotFit + (secondsUntilFullRegenWhileSprintingIfCompletelyFit - secondsUntilFullRegenWhileSprintingIfCompletelyNotFit) * fNonMagicSkillFraction
				Let y := secondsUntilFullRegenWhileRunningIfCompletelyNotFit + (secondsUntilFullRegenWhileRunningIfCompletelyFit - secondsUntilFullRegenWhileRunningIfCompletelyNotFit) * fNonMagicSkillFraction
				Let secondsUntilFullRegen := x - ((x - y) * Call WithinRange 0 (((Call CFGetAVCurrent PlayerRef avcAthletics)/100)*athleticsWeightFraction) 1)
				if eval bShouldLogFatigueRegenCalculation
					Call LogRA "Sprint calculation. athleticsWeightFraction:"+$athleticsWeightFraction+" originalSecondsUntilFullRegen:" +$x+" runningSecondsUntilFullRegen:"+$y+" secondsUntilFullRegen:"+$secondsUntilFullRegen
				endif
			else ; SB.bStanding
				Let secondsUntilFullRegen := secondsUntilFullRegenWhileStandingIfCompletelyNotFit + (secondsUntilFullRegenWhileStandingIfCompletelyFit - secondsUntilFullRegenWhileStandingIfCompletelyNotFit) * fNonMagicSkillFraction
			endif
			Let fFatigueRegen += (Call CFGetAVBase PlayerRef 10) * secondsPassed / secondsUntilFullRegen
			if eval bShouldLogFatigueRegenCalculation
				Call LogRA "Before VanillaFatigueRegen adjustments. fFatigueRegen:" +$fFatigueRegen+" secondsUntilFullRegen:"+$secondsUntilFullRegen
			endif
			;Need to compensate for fFatigueReturnBase, fFatigueRunBase
			;(Those GameSettings cannot be adjusted without affecting NPCs.)
			Let fFatigueRegen -= PlayerRef.Call GetVanillaFatigueRegen
			if eval bShouldLogFatigueRegenCalculation
				Call LogRA "After VanillaFatigueRegen adjustment. fFatigueRegen:" +$fFatigueRegen
			endif
		endif
		if eval bShouldLogFatigueRegenCalculation
			Call LogRA "fFatigueRegen:" +$fFatigueRegen
		endif
		PlayerRef.ModAVModC avcFatigue "Damage" fFatigueRegen
		; ## Fatigue max
		;The above regen formula usually reduces regen. This compensates by increasing the max while secondsUntilFullRegen is maintained.
;		if eval (!bAdjustedFatigueMax) || GetGameLoaded
;			Let bAdjustedFatigueMax := 1
;			PlayerRef.AddSpell RABonusFatigue
;		endif
		PlayerRef.RemoveSpell RABonusFatigue
	else
		PlayerRef.RemoveSpell RABonusFatigue
	endif
end

begin _MenuMode
	Let iCountDownAfterMenuMode := 10
end