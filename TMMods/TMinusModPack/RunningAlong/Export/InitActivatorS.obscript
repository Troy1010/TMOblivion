scn InitActivatorS

short logLevel
float secondsUntilFullRegenWhileStandingIfCompletelyFit
float secondsUntilFullRegenWhileWalkingIfCompletelyFit
float secondsUntilFullRegenWhileRunningIfCompletelyFit
float secondsUntilFullRegenWhileSprintingIfCompletelyFit
float secondsUntilFullRegenWhileStandingIfCompletelyNotFit
float secondsUntilFullRegenWhileWalkingIfCompletelyNotFit
float secondsUntilFullRegenWhileRunningIfCompletelyNotFit
float secondsUntilFullRegenWhileSprintingIfCompletelyNotFit
float athleticsWeightFraction
short bPrintToConsole
short bShouldLogFlooding
short featureFallOnLowFatigue
short bShouldLogNonMagicSkillFractionCalculation
short bShouldLogFatigueRegenCalculation
short featureNoBackwardsRunning
short sprintKey
short featureFatigue
short featureSprint
float neutralizefGlobalTimeMultiplier

begin OnActivate
	if eval (Call InitPostLoad2) || (Call InitOnStart1)
		; Default ini
		Let logLevel := LogLevelWarning
		Let secondsUntilFullRegenWhileStandingIfCompletelyFit := 20
		Let secondsUntilFullRegenWhileWalkingIfCompletelyFit := 20 * 1.2
		Let secondsUntilFullRegenWhileRunningIfCompletelyFit := -600
		Let secondsUntilFullRegenWhileSprintingIfCompletelyFit := -10
		Let secondsUntilFullRegenWhileStandingIfCompletelyNotFit := 60
		Let secondsUntilFullRegenWhileWalkingIfCompletelyNotFit := 60 * 1.2
		Let secondsUntilFullRegenWhileRunningIfCompletelyNotFit := -300
		Let secondsUntilFullRegenWhileSprintingIfCompletelyNotFit := -20
		Let athleticsWeightFraction := 0.05
		Let bPrintToConsole := 0
		Let bShouldLogFlooding := 0
		Let featureFallOnLowFatigue := 1
		Let bShouldLogNonMagicSkillFractionCalculation := 0
		Let bShouldLogFatigueRegenCalculation := 0
		Let featureNoBackwardsRunning := 1
		Let sprintKey := 42;LShift
		Let featureFatigue := 1
		Let featureSprint := 1
		Let neutralizefGlobalTimeMultiplier := 0
		; Read ini
		RunBatchScript "Data\ini\RunningAlong.ini" 1
		; Pass ini
		Let RAQst.logLevel := logLevel
		Let RAQst.secondsUntilFullRegenWhileStandingIfCompletelyFit := secondsUntilFullRegenWhileStandingIfCompletelyFit
		Let RAQst.secondsUntilFullRegenWhileWalkingIfCompletelyFit := secondsUntilFullRegenWhileWalkingIfCompletelyFit
		Let RAQst.secondsUntilFullRegenWhileRunningIfCompletelyFit := secondsUntilFullRegenWhileRunningIfCompletelyFit
		Let RAQst.secondsUntilFullRegenWhileSprintingIfCompletelyFit := secondsUntilFullRegenWhileSprintingIfCompletelyFit
		Let RAQst.secondsUntilFullRegenWhileStandingIfCompletelyNotFit := secondsUntilFullRegenWhileStandingIfCompletelyNotFit
		Let RAQst.secondsUntilFullRegenWhileWalkingIfCompletelyNotFit := secondsUntilFullRegenWhileWalkingIfCompletelyNotFit
		Let RAQst.secondsUntilFullRegenWhileRunningIfCompletelyNotFit := secondsUntilFullRegenWhileRunningIfCompletelyNotFit
		Let RAQst.secondsUntilFullRegenWhileSprintingIfCompletelyNotFit := secondsUntilFullRegenWhileSprintingIfCompletelyNotFit
		Let RAQst.neutralizefGlobalTimeMultiplier := neutralizefGlobalTimeMultiplier
		Let RAQst.athleticsWeightFraction := athleticsWeightFraction
		Let RAQst.bPrintToConsole := bPrintToConsole
		Let RAQst.bShouldLogFlooding := bShouldLogFlooding
		Let RAQst.featureFallOnLowFatigue := featureFallOnLowFatigue
		Let RAQst.bShouldLogNonMagicSkillFractionCalculation := bShouldLogNonMagicSkillFractionCalculation
		Let RAQst.bShouldLogFatigueRegenCalculation := bShouldLogFatigueRegenCalculation
		Let RAQst.featureNoBackwardsRunning := featureNoBackwardsRunning
		Let RAQst.sprintKey := sprintKey
		Let RAQst.featureFatigue := featureFatigue
		Let RAQst.featureSprint := featureSprint
		Call LogRA "InitActivatorS. bPrintToConsole:"+$RAQst.bPrintToConsole+" logLevel:"+$RAQst.logLevel+" bShouldLogFlooding:"+$RAQst.bShouldLogFlooding+" bShouldLogNonMagicSkillFractionCalculation:"+$RAQst.bShouldLogNonMagicSkillFractionCalculation+" bShouldLogFatigueRegenCalculation:"+$RAQst.bShouldLogFatigueRegenCalculation+" featureNoBackwardsRunning:"+$RAQst.featureNoBackwardsRunning+" sprintKey:"+$RAQst.sprintKey+" featureFatigue:"+$RAQst.featureFatigue+" featureSprint:"+$RAQst.featureSprint
		Call LogRA "neutralizefGlobalTimeMultiplier:"+$RAQst.neutralizefGlobalTimeMultiplier
	endif
end