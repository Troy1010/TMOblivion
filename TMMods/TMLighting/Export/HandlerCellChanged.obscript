scn HandlerCellChanged
; TODO: Pass in normal variables instead of argumentArr

array_var argumentArr
array_var aTemp
short isDarkCell

Begin _Function { argumentArr }
	Let isDarkCell := ar_HasKey TLQst.CellsWithDarkLightingRegistry (GetFormIDString argumentArr["rNewCell"])
	;==== Contrast
	if eval TLQst.featureShaderInDarkCells
		Call LogTL "Setting Shader. isDarkCell:"+$isDarkCell
		ORSetExtraEffectEnabled "TMLighting" isDarkCell
	endif
	;==== Ambient Light
	if eval TLQst.featureSetDarkCellAmbientLighting
		if eval isDarkCell
			Let aTemp := ar_Construct "stringmap"
			Let aTemp["ambient"] := ar_List TLQst.fAmbientLighting TLQst.fAmbientLighting TLQst.fAmbientLighting
			SetCellLighting argumentArr["rNewCell"] aTemp
			Call LogTL "Setting cell lighting. aTemp:"+$(Call ToLogStr &aTemp)
		endif
	endif
	;==== Distance Fog
	if eval TLQst.featureNoDistanceFogInDarkCells
		if eval isDarkCell
			Let aTemp := ar_Construct "stringmap"
			Let aTemp["fog"] := ar_List 0 0 0
			Let aTemp["clip"] := 9999999
			SetCellLighting argumentArr["rNewCell"] aTemp
			Call LogTL "Setting DistantFog. aTemp:"+$(Call ToLogStr &aTemp)
		endif
	endif
	;
	Call LogTL "TMLighting`HandlerCellChanged`Close. argumentArr:"+$(Call ToLogStr &argumentArr)+" isDarkCell:"+$isDarkCell+" newCellID:"+$(GetFormIDString argumentArr["rNewCell"])+" lighting:"+$(Call ToLogStr (&((GetCellLighting argumentArr["rNewCell"])["ambient"])))
end